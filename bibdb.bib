% This file was created with JabRef 2.10.
% Encoding: UTF-8


@Article{agon,
  Title                    = {My fyu book},
  Author                   = {Carlos Agon},
  Journal                  = {The American Naturalist},
  Year                     = {2001},

  Owner                    = {test33},
  Timestamp                = {2015.04.24}
}

@TechReport{Conradi1995,
  Title                    = {Version Models for Software Configuration Management},
  Author                   = {Reidar Conradi and Bernhard Westfechtel},
  Institution              = {ACM Computing Surveys},
  Year                     = {1995},

  Owner                    = {test33},
  Timestamp                = {2015.04.24}
}

@Misc{gecode,
  author = "{Gecode Team}",
  title = "Gecode: Generic Constraint Development Environment",
  year = {2006},
  note = {Available from \texttt{http://www.gecode.org}},
}

@Misc{asgl,
  author = "Kilian Sprotte",
  title = "ASGL: Argumentation Semantics in Gecode and Lisp",
  year = {2015},
  note = {Available from \texttt{https://github.com/kisp/asgl}},
}

@Misc{ecl,
  author = "Juan Jose Garcia-Ripoll and Daniel Kochma\'nski",
  title = "ECL: Embeddable Common-Lisp",
  year = {2001},
  note = {Available from \texttt{http://ecls.sourceforge.net}},
}

@INPROCEEDINGS{Engines:97,
  title = {Programming Constraint Inference Engines},
  year = {1997},
  author = {Christian Schulte},

abstract = {Existing constraint programming systems offer a fixed set
                  of inference engines implementing search strategies
                  such as single, all, and best solution search. This
                  is unfortunate, since new engines cannot be
                  integrated by the user.  The paper presents
                  first-class computation spaces as abstractions with
                  which the user can program inference engines at a
                  high level.  Using computation spaces, the paper
                  covers several inference engines ranging from
                  standard search strategies to techniques new to
                  constraint programming, including limited
                  discrepancy search, visual search, and
                  saturation. Saturation is an inference method for
                  tautology-checking used in industrial practice.
                  Computation spaces have shown their practicability
                  in the constraint programming system Oz.},

  editor = {Gert Smolka},
  booktitle = {Proceedings of the Third International Conference on
                  Principles and Practice of Constraint Programming},
  address = {Schlo\ss{} Hagenberg, Austria},
  series = {Lecture Notes in Computer Science},
  publisher = {Springer-Verlag},
  month = oct,
  volume = {1330},
  pages = {519--533},
  sline = {4308},
  project-key = {C1},
  label = {Engines}
}
